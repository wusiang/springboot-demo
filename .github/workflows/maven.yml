# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: spring-boot-demo


# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

on:
  workflow_dispatch:


# 👇 在这里添加权限设置
permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    # 1. 检出代码
    - name: check out code
      uses: actions/checkout@v4
      
    # 2. 设置Java环境
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    # 3. 编译项目
    - name: Build with Maven
      run: mvn clean package -U -DskipTests --file pom.xml

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 4. 登录ECR镜像中心
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 6. 构建、标记和推送镜像到 ECR (使用全局变量)
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: "wujinghua/repo"
        IMAGE_TAG: latest
      run: |
          docker build -f src/main/resources/Dockerfile -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # 7. 发布项目 (使用全局变量并修正)
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
            # 定义完整的镜像名变量，使用 workflow 中定义的 ECR_REPOSITORY 和 IMAGE_TAG
            IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            CONTAINER_NAME="springboot-app" # 定义容器名，方便管理

            # 1. 登录 ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 2. 拉取最新的镜像
            sudo docker pull $IMAGE_NAME
            
            # 3. 停止并删除旧的容器 (如果存在)
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true
            
            # 4. 运行新的容器
            sudo docker run -d -p 9014:9014 --name $CONTAINER_NAME $IMAGE_NAME

    # # 4.发布项目
    # - name: Deploy to Server
    #   uses: appleboy/ssh-action@v1.0.3 # 假设使用ssh-action
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USER }}
    #     key: ${{ secrets.SERVER_SSH_KEY }}
    #     script: |
    #       echo "Connected to server!"
    #       cd cd /usr/local/apps/myApp/
    #       docker-compose pull
    #       docker-compose up -d
